<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>
		Iranian Experts
	</title>

	<style>
		/* زودُ */
		p:first-letter {
			font-size: 30pt;
			font-weight: bold;
		}
	</style>
</head>
<body>
	<!--
	اين يک متن تستی است
	-->

	<p>
		In the early days of ASP.NET most developers didn’t write client side code. They
		just used server side UI controls and any programmatic interface state changes were
		restricted to post-back processing.
		Enter Ajax, RIA, Scriptable Services, Scriptaculous, YUI, jQuery, HTML5, etc.
		Now ASP.NET developers, no matter what ASP.NET flavor you are using (YES, including
		WebForms) need to hold some of the party IN the browser.
		To manipulate the Document Object Model (DOM) elements we need to know HOW to address
		them.
		WebForms has a built in feature that pertains to the client identity of HTML elements.
		ASP.NET used an algorithm to determine the client side naming of a server side control.
	</p>

	<br />

	<p>
		On the early days of ASP.NET most developers didn’t write client side code. They
		just used server side UI controls and any programmatic interface state changes were
		restricted to post-back processing.
		Enter Ajax, RIA, Scriptable Services, Scriptaculous, YUI, jQuery, HTML5, etc.
		Now ASP.NET developers, no matter what ASP.NET flavor you are using (YES, including
		WebForms) need to hold some of the party IN the browser.
		To manipulate the Document Object Model (DOM) elements we need to know HOW to address
		them.
		WebForms has a built in feature that pertains to the client identity of HTML elements.
		ASP.NET used an algorithm to determine the client side naming of a server side control.
	</p>
</body>
</html>
